name: Build tiny11 from UUP Dump

on:
  workflow_dispatch:
    inputs:
      uup_id:
        description: 'UUP Dump ID'
        required: true
        default: 'bca2cbef-970f-4251-bf19-125a60a63735'
      edition:
        description: 'Windows Edition'
        required: true
        default: 'Professional'
        options:
          - Professional
          - Home
          - Education
          - Enterprise
          - ProEducation
          - ProForWorkstations
          - EducationProfessional

jobs:
  build-tiny11-uup:
    runs-on: windows-latest
    timeout-minutes: 300
    env:
      LANGUAGE: en-us

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup environment
      shell: powershell
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force
        New-Item -ItemType Directory -Path .\source,\output,\uup_files -Force
        
        # Fungsi download dengan retry
        function Download-File {
            param($Url, $Output)
            $retryCount = 3
            $retryDelay = 10
            
            for ($i = 1; $i -le $retryCount; $i++) {
                try {
                    Write-Host "Download attempt #$i for $Url"
                    Invoke-WebRequest -Uri $Url -OutFile $Output -UseBasicParsing
                    if (Test-Path $Output) { 
                        Write-Host "Download successful"
                        return 
                    }
                }
                catch {
                    Write-Warning "Attempt $i failed: $($_.Exception.Message)"
                    if ($i -lt $retryCount) {
                        Write-Host "Retrying in $retryDelay seconds..."
                        Start-Sleep -Seconds $retryDelay
                    }
                }
            }
            throw "Failed to download $Url after $retryCount attempts"
        }
        
        # Install aria2
        try {
            $aria2Url = "https://github.com/aria2/aria2/releases/download/release-1.37.0/aria2-1.37.0-win-64bit-build1.zip"
            Download-File -Url $aria2Url -Output "aria2.zip"
            Expand-Archive aria2.zip -DestinationPath .\aria2
            Copy-Item -Path ".\aria2\aria2-*\*.exe" -Destination "C:\Windows\System32\" -Force
        }
        finally {
            Remove-Item aria2, aria2.zip -Recurse -Force -ErrorAction SilentlyContinue
        }
        
        # Install wimlib dengan alternatif URL
        try {
            $wimlibUrls = @(
                "https://wimlib.net/downloads/wimlib-1.14.1-windows-x86_64-bin.zip",
                "https://github.com/tiny11builder/tiny11-releases/releases/download/tools/wimlib-1.14.1-windows-x86_64-bin.zip"
            )
            
            foreach ($url in $wimlibUrls) {
                try {
                    Write-Host "Trying wimlib download from: $url"
                    Download-File -Url $url -Output "wimlib.zip"
                    Expand-Archive wimlib.zip -DestinationPath .\wimlib
                    Copy-Item -Path ".\wimlib\wimlib-*\*.exe" -Destination "C:\Windows\System32\" -Force
                    break
                }
                catch {
                    Write-Warning "Failed to download wimlib from $url"
                }
            }
            
            if (-not (Test-Path "wimlib")) {
                throw "All wimlib download attempts failed!"
            }
        }
        finally {
            Remove-Item wimlib, wimlib.zip -Recurse -Force -ErrorAction SilentlyContinue
        }
        
        # Install PowerShell modules
        Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
        Install-Module -Name 7Zip4Powershell -Force -Confirm:$false

    - name: Download UUP files
      shell: powershell
      run: |
        $uupId = "${{ github.event.inputs.uup_id }}"
        $edition = "${{ github.event.inputs.edition }}"
        $apiUrl = "https://uupdump.net/get.php?id=$uupId&pack=$env:LANGUAGE&edition=$edition"
        
        Write-Host "Downloading UUP files for ID: $uupId"
        Write-Host "Edition: $edition"
        Write-Host "API URL: $apiUrl"
        
        # Download file list
        $retryCount = 3
        $fileList = $null
        
        for ($i = 1; $i -le $retryCount; $i++) {
            try {
                $response = Invoke-WebRequest -Uri $apiUrl -UseBasicParsing
                $fileList = $response.Content
                break
            }
            catch {
                Write-Warning "Attempt $i failed: $($_.Exception.Message)"
                if ($i -eq $retryCount) {
                    throw "Failed to download file list after $retryCount attempts"
                }
                Start-Sleep -Seconds (10 * $i)
            }
        }
        
        $fileList | Out-File -FilePath .\uup_files\filelist.txt -Encoding UTF8
        
        # Download files using aria2c
        aria2c -i .\uup_files\filelist.txt -d .\uup_files -j 16 -x 16 -c --retry-wait=10
        
        # Verify download
        $cabFiles = Get-ChildItem .\uup_files\*.cab -ErrorAction SilentlyContinue
        if (-not $cabFiles) {
            throw "Download failed! No CAB files found"
        }
        Write-Host "Downloaded $($cabFiles.Count) CAB files"

    - name: Assemble ISO
      shell: powershell
      run: |
        Set-Location .\uup_files
        
        # Extract CAB files using PowerShell native method
        Get-ChildItem *.cab | ForEach-Object {
            Write-Host "Extracting $($_.Name) using PowerShell..."
            $extractPath = "extracted_$($_.BaseName)"
            New-Item -ItemType Directory -Path $extractPath -Force
            Expand-Archive -Path $_.FullName -DestinationPath $extractPath
            Copy-Item -Path "$extractPath\*" -Destination . -Recurse -Force
            Remove-Item $extractPath -Recurse -Force
        }
        
        # Create ISO using built-in script
        if (Test-Path ".\createiso.cmd")) {
            $edition = "${{ github.event.inputs.edition }}"
            .\createiso.cmd "$edition" ..\source\Win11_UUP.iso
        } else {
            # Fallback to manual ISO creation
            Write-Host "createiso.cmd not found! Using manual method..."
            .\convert-UUP-to-ISO.ps1 -SourcePath . -OutputPath ..\source\Win11_UUP.iso -Edition "${{ github.event.inputs.edition }}"
        }
        
        if (-not (Test-Path ..\source\Win11_UUP.iso)) {
            throw "ISO assembly failed!"
        }
        Write-Host "ISO created successfully at $(Resolve-Path ..\source\Win11_UUP.iso)"

    - name: Build tiny11 ISO
      shell: powershell
      run: |
        $isoPath = Resolve-Path ".\source\Win11_UUP.iso"
        $edition = "${{ github.event.inputs.edition }}"
        
        Write-Host "Building tiny11 for edition: $edition"
        Write-Host "Using ISO: $isoPath"
        
        # Run tiny11maker
        .\tiny11maker.ps1 -IsoPath "$isoPath" `
                           -Edition "$edition" `
                           -UUPBuild `
                           -NoTelemetry `
                           -CompactOS `
                           -Verbose
        
        $outputIso = Get-ChildItem .\output\*.iso
        if (-not $outputIso) {
            throw "Build failed! Output ISO not found"
        }
        Write-Host "tiny11 build completed successfully! Output: $($outputIso.FullName)"
        Write-Host "File size: $([math]::Round($outputIso.Length / 1GB, 2)) GB"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: tiny11-${{ github.event.inputs.edition }}-${{ github.event.inputs.uup_id }}
        path: .\output\*.iso
        retention-days: 2

    - name: Cleanup
      shell: powershell
      run: |
        Write-Host "Cleaning up temporary files..."
        Remove-Item -Recurse -Force .\source -ErrorAction SilentlyContinue
        Remove-Item -Recurse -Force .\uup_files -ErrorAction SilentlyContinue
        Remove-Item -Recurse -Force .\temp -ErrorAction SilentlyContinue
        Write-Host "Cleanup completed!"
